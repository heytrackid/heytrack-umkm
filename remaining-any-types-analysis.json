{
  "summary": {
    "totalInstances": 63,
    "categories": {
      "reactComponentProps": 11,
      "callbackParameters": 0,
      "promiseTypes": 7,
      "interfaceProperties": 16,
      "comments": 0,
      "other": 29
    }
  },
  "details": [
    {
      "file": "src/app/hpp/components/CostBreakdownChart.tsx",
      "line": 178,
      "content": "const CustomTooltip = ({ active, payload }: any) => {"
    },
    {
      "file": "src/app/hpp/components/HPPComparisonCard.example.tsx",
      "line": 5,
      "content": "* into the HPP Historical Tab or any other page.",
      "type": "other"
    },
    {
      "file": "src/app/hpp/components/HPPHistoricalChart.tsx",
      "line": 240,
      "content": "const CustomTooltip = ({ active, payload, label }: any) => {"
    },
    {
      "file": "src/app/orders/types/orders.types.ts",
      "line": 57,
      "content": "customer?: any // Will be properly typed when customers module is done"
    },
    {
      "file": "src/app/resep/types/production.types.ts",
      "line": 59,
      "content": "recipe?: any // Will be properly typed when recipes module is integrated"
    },
    {
      "file": "src/app/resep/types/production.types.ts",
      "line": 60,
      "content": "quality_inspector?: any // Staff member"
    },
    {
      "file": "src/components/automation/smart-financial-dashboard.tsx",
      "line": 45,
      "content": "onFinancialAction?: (action: string, data?: any) => void"
    },
    {
      "file": "src/components/automation/smart-pricing-assistant.tsx",
      "line": 163,
      "content": "{Object.entries(analysis.pricing).map(([tier, data]: [string, any]) => (",
      "type": "other"
    },
    {
      "file": "src/components/lazy/chart-lazy-loader.tsx",
      "line": 45,
      "content": "export const LineChartWithSuspense = ({ children, title, height = 'h-64', ...props }: any) => ("
    },
    {
      "file": "src/components/lazy/chart-lazy-loader.tsx",
      "line": 55,
      "content": "export const BarChartWithSuspense = ({ children, title, height = 'h-64', ...props }: any) => ("
    },
    {
      "file": "src/components/lazy/chart-lazy-loader.tsx",
      "line": 65,
      "content": "export const AreaChartWithSuspense = ({ children, title, height = 'h-64', ...props }: any) => ("
    },
    {
      "file": "src/components/lazy/chart-lazy-loader.tsx",
      "line": 75,
      "content": "export const PieChartWithSuspense = ({ children, title, height = 'h-64', ...props }: any) => ("
    },
    {
      "file": "src/components/lazy/chart-lazy-loader.tsx",
      "line": 86,
      "content": "export const ComposedChartWithSuspense = ({ children, title, height = 'h-64', ...props }: any) => ("
    },
    {
      "file": "src/components/lazy/index.ts",
      "line": 184,
      "content": "const preloadPromises: Promise<any>[] = []"
    },
    {
      "file": "src/components/lazy/modal-lazy-loader.tsx",
      "line": 202,
      "content": "props: any = {},"
    },
    {
      "file": "src/components/lazy/progressive-loading.tsx",
      "line": 223,
      "content": "const VirtualizedTableLoader = ({ data, columns }: any) => {"
    },
    {
      "file": "src/components/lazy/progressive-loading.tsx",
      "line": 236,
      "content": "const SimpleTableView = ({ data, columns }: any) => ("
    },
    {
      "file": "src/components/lazy/route-loading.tsx",
      "line": 130,
      "content": "importFunc: () => Promise<any>,"
    },
    {
      "file": "src/components/lazy/table-lazy-loader.tsx",
      "line": 179,
      "content": "default: ({ data, columns, height = 400 }: any) => {"
    },
    {
      "file": "src/components/lazy/table-lazy-loader.tsx",
      "line": 187,
      "content": "export const VirtualizedTableWithSuspense = ({ data, columns, height = 400, ...props }: any) => ("
    },
    {
      "file": "src/components/ui/card-list.tsx",
      "line": 13,
      "content": "[key: string]: any"
    },
    {
      "file": "src/components/ui/crud-form.tsx",
      "line": 8,
      "content": "value: any;"
    },
    {
      "file": "src/components/ui/mobile-gestures.tsx",
      "line": 434,
      "content": "function throttle<T extends (...args: unknown[]) => any>(",
      "type": "other"
    },
    {
      "file": "src/hooks/useErrorHandler.ts",
      "line": 89,
      "content": "* @returns {AppError|null} error - Current error if any",
      "type": "other"
    },
    {
      "file": "src/hooks/useErrorHandler.ts",
      "line": 146,
      "content": "* @returns {boolean} hasErrors - Whether there are any errors",
      "type": "other"
    },
    {
      "file": "src/hooks/useRoutePreloading.ts",
      "line": 100,
      "content": "const preloadPromises: Promise<any>[] = []"
    },
    {
      "file": "src/lib/api/cache.ts",
      "line": 13,
      "content": "private cache = new Map<string, CacheEntry<any>>()",
      "type": "other"
    },
    {
      "file": "src/lib/api/cache.ts",
      "line": 14,
      "content": "private pendingRequests = new Map<string, Promise<any>>()"
    },
    {
      "file": "src/lib/api-validation.ts",
      "line": 315,
      "content": "middlewares: Array<(handler: unknown) => any>",
      "type": "other"
    },
    {
      "file": "src/lib/automation-engine.ts",
      "line": 570,
      "content": "data: any = {}"
    },
    {
      "file": "src/lib/debounce.ts",
      "line": 8,
      "content": "export function debounce<T extends (...args: unknown[]) => any>(",
      "type": "other"
    },
    {
      "file": "src/lib/debounce.ts",
      "line": 53,
      "content": "export function useDebouncedCallback<T extends (...args: unknown[]) => any>(",
      "type": "other"
    },
    {
      "file": "src/lib/enhanced-api.ts",
      "line": 22,
      "content": "const pendingRequests = new Map<string, Promise<any>>();"
    },
    {
      "file": "src/lib/enhanced-api.ts",
      "line": 25,
      "content": "private cache = new Map<string, CacheEntry<any>>();",
      "type": "other"
    },
    {
      "file": "src/lib/enhanced-api.ts",
      "line": 37,
      "content": "private generateCacheKey(operation: string, params: any = {}): string {"
    },
    {
      "file": "src/lib/enhanced-api.ts",
      "line": 87,
      "content": "queryFn: () => Promise<any>,"
    },
    {
      "file": "src/lib/error-handler.ts",
      "line": 87,
      "content": "export function withErrorHandler<T extends (...args: unknown[]) => Promise<any>>("
    },
    {
      "file": "src/lib/performance.ts",
      "line": 80,
      "content": "function debounce<T extends (...args: unknown[]) => any>(func: T, delay: number): T {",
      "type": "other"
    },
    {
      "file": "src/lib/performance.ts",
      "line": 89,
      "content": "function throttle<T extends (...args: unknown[]) => any>(func: T, limit: number): T {",
      "type": "other"
    },
    {
      "file": "src/lib/performance.ts",
      "line": 101,
      "content": "export const useDebounce = <T extends (...args: unknown[]) => any>(",
      "type": "other"
    },
    {
      "file": "src/lib/performance.ts",
      "line": 111,
      "content": "export const useThrottle = <T extends (...args: unknown[]) => any>(",
      "type": "other"
    },
    {
      "file": "src/lib/performance.ts",
      "line": 122,
      "content": "export const usePerformantCallback = <T extends (...args: unknown[]) => any>(",
      "type": "other"
    },
    {
      "file": "src/lib/query-cache.ts",
      "line": 11,
      "content": "private cache = new Map<string, { data: any; timestamp: number; ttl: number }>()"
    },
    {
      "file": "src/lib/safe-cast.ts",
      "line": 4,
      "content": "* Use these instead of 'as any' type assertions.",
      "type": "other"
    },
    {
      "file": "src/lib/schemas.ts",
      "line": 31,
      "content": "favorite_items: z.any().optional().nullable(),",
      "type": "other"
    },
    {
      "file": "src/lib/schemas.ts",
      "line": 99,
      "content": "nutritional_info: z.any().optional().nullable(),",
      "type": "other"
    },
    {
      "file": "src/lib/schemas.ts",
      "line": 125,
      "content": "nutritional_info: z.any().optional().nullable(),",
      "type": "other"
    },
    {
      "file": "src/lib/schemas.ts",
      "line": 177,
      "content": "tags: z.any().optional().nullable(),",
      "type": "other"
    },
    {
      "file": "src/lib/schemas.ts",
      "line": 178,
      "content": "metadata: z.any().optional().nullable(),",
      "type": "other"
    },
    {
      "file": "src/lib/search-filter.ts",
      "line": 115,
      "content": "* Check if any filter is active",
      "type": "other"
    },
    {
      "file": "src/lib/search-filter.ts",
      "line": 177,
      "content": "conditions: Record<keyof T, any>",
      "type": "other"
    },
    {
      "file": "src/lib/settings-validation.ts",
      "line": 119,
      "content": "export function validateSettingsCategory(category: string, data: unknown): { success: boolean; data?: any; errors?: string[] } {"
    },
    {
      "file": "src/lib/type-guards.ts",
      "line": 5,
      "content": "* instead of using 'as any' or type assertions.",
      "type": "other"
    },
    {
      "file": "src/modules/charts/components/LazyCharts.tsx",
      "line": 95,
      "content": "[key: string]: any"
    },
    {
      "file": "src/modules/recipes/components/LazyComponents.tsx",
      "line": 95,
      "content": "[key: string]: any"
    },
    {
      "file": "src/modules/recipes/components/SmartPricingAssistant.tsx",
      "line": 148,
      "content": "{Object.entries(analysis.pricing).map(([tier, data]: [string, any]) => (",
      "type": "other"
    },
    {
      "file": "src/modules/recipes/services/EnhancedHPPCalculationService.ts",
      "line": 6,
      "content": "[key: string]: any"
    },
    {
      "file": "src/modules/recipes/services/EnhancedHPPCalculationService.ts",
      "line": 17,
      "content": "[key: string]: any"
    },
    {
      "file": "src/modules/recipes/services/EnhancedHPPCalculationService.ts",
      "line": 467,
      "content": "pricingInsights: any // PricingInsights"
    },
    {
      "file": "src/providers/PreloadingProvider.tsx",
      "line": 20,
      "content": "getMetrics: () => any",
      "type": "other"
    },
    {
      "file": "src/shared/hooks/data/useDebounce.ts",
      "line": 22,
      "content": "export function useDebouncedCallback<T extends (...args: unknown[]) => any>(",
      "type": "other"
    },
    {
      "file": "src/shared/utils/index.ts",
      "line": 26,
      "content": "export const debounce = <T extends (...args: unknown[]) => any>(",
      "type": "other"
    },
    {
      "file": "src/types/errors.ts",
      "line": 166,
      "content": "* Error handler utility - converts any error to ApiError format",
      "type": "other"
    }
  ]
}